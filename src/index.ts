import { app, BrowserWindow, ipcMain } from 'electron';
import brigetContext from './bridges/index'
import { bridgeName } from './type/common';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      webSecurity: false
    },
    
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  initBridge()
  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.on('msg-from-renderer', (event, arg) => {
    console.log(arg);
    event.reply('msg-from-main', 'hello from main')
  })


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
type bridgeMessage = {
  bridgeName: string,
  data: any,
  id: number
}
function initBridge() {
  ipcMain.on('sendMessage', (event, arg:bridgeMessage) => {

    console.log("mainBridge:",arg);
    // 调用函数处理
    let res = brigetContext[arg.bridgeName](arg.data)
    console.log("bridge res :"+res);
    
    // 返回结果
    event.reply('receiveMessage', { id: arg.id, data: res })
  })
  
}